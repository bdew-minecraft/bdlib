buildscript {
    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "gt"
            url = "https://gregtech.overminddl1.com/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url = "https://jitpack.io"
        }
    }
    dependencies {
        classpath 'com.github.GTNewHorizons:ForgeGradle:1.2.11'
    }
}

plugins {
    id 'scala'
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

apply plugin: 'forge'

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

if (project.hasProperty('forgeOverride')) {
    config.forge.version = forgeOverride
}

if (project.hasProperty('buildnum')) {
    ext.simpleVersion = "${config.bdlib.version}.${project.buildnum}"
} else {
    ext.simpleVersion = "${config.bdlib.version}-DEV"
}

version = simpleVersion + '-mc' + config.minecraft.version

group = "net.bdew"
archivesBaseName = "bdlib"

repositories {
    maven {
        name 'Overmind forge repo mirror'
        url 'https://gregtech.overminddl1.com/'
    }
}

minecraft {
    version = "${config.minecraft.version}-${config.forge.version}"
    replace("BDLIB_VER", simpleVersion.toString())
}

import org.apache.tools.ant.filters.ReplaceTokens


sourceSets {
    main {
        scala {
            srcDir 'src'
        }
        resources {
            srcDir 'resources'
        }
    }
}

// this is needed for IntelliJ so we don't have to copy over the assets manually every time
idea {
    module {
        inheritOutputDirs = true
    }
}

processResources {
    inputs.property "tokens", minecraft.replacements
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        filter(ReplaceTokens, tokens: minecraft.replacements)
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task sourceJar(type: Jar) {
    classifier "sources"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier "dev"
    duplicatesStrategy "exclude"
}

afterEvaluate { project ->
    // Fudge the inputs of source jars so we get the version after replacements
    tasks.getByPath(":sourceJar").from(tasks.getByPath(":sourceMainScala").outputs.files)
}

artifacts {
    archives sourceJar
    archives deobfJar
}

apply plugin: 'maven-publish'

publishing {
    publications {
        maven(MavenPublication) {
            artifact deobfJar
            artifact sourceJar
        }
    }
    repositories {
        maven {
            url "file://var/www/maven"
        }
    }
}

curseforge {
    apiKey = project.hasProperty("curseForgeApiKey") ? project.curseForgeApiKey : ""
    project {
        id = config.curseforge.id
        releaseType = 'alpha'

        changelogType = "markdown"
        changelog = project.hasProperty("changelog") ? project.changelog : "No changelog available"

        mainArtifact(jar) {
            displayName = "BDLib ${simpleVersion} (MC ${config.minecraft.version})"
        }

        addGameVersion config.minecraft.version
        addGameVersion "Java 8"
        addGameVersion "Forge"

        addArtifact deobfJar
        addArtifact sourceJar
    }
}

